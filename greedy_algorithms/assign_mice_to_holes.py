# Assign Mice to Holes (Распределить мышей по норам)
# Есть N мышей, и N отверстий расположены по прямой линии. В каждом отверстии может разместиться только 1 мышь.
# Мышь может оставаться на своем месте, переместиться на один шаг вправо от x до x + 1 или на один шаг влево
# от x до x -1. Любое из этих действий занимает 1 минуту.
# Распределите мышей по отверстиям так, чтобы время, когда последняя мышь попадает в отверстие, было минимальным.
#
# mice = [4, -4, 2]
# holes = [4, 0, 5]
#
# Поместим мышь [-4] в норку, которая ближе всего к мыши [0]. Для этого отсортируем положение мышей и норок.
# Найдем максимальную разницу между мышами и положением соответствующей норки,
# чтобы определить сколько времени потребуется, чтобы завести соответствующую мышь в соответствующую ей норку.
#
# mice  = [-4, 2, 4]
# holes = [0, 4, 5]
# Вывод: -4, -2, -1

def assign_mice(mice, holes):
    """Assign Mice to Holes (Распределить мышей по норам). Сложность O(n log n)"""
    # проверим одинаковое ли кол-во мышей и норок
    if len(mice) != len(holes):
        return 'Number of mice and holes not the same'
    # сортируем мышей и норки
    mice.sort()
    holes.sort()
    # переменная для максимальной разницы
    max_diff = 0

    for i in range(len(mice)):
        # если разница мыши и норки больше макс.значения, переназначаем его
        if max_diff < abs(mice[i] - holes[i]):
            max_diff = abs(mice[i] - holes[i])
    return max_diff


if __name__ == "__main__":
    mice = [4, -4, 2]
    holes = [4, 0, 5]
    min_time = assign_mice(mice, holes)
    print('The last mouse gets into the hole in time: ', min_time)

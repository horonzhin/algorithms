# Number of palindromic paths in a matrix (Количество палиндромных путей в матрице)
# Подсчет количества палиндромных путей в матрице. Путь определяется как последовательность ячеек,
# начинающаяся с верхней левой ячейки и заканчивающаяся в нижней правой ячейке.
#
# Что дано:
# - Палиндром (одинаково читающаяся строка в обеих направлениях)
# - Матрица 3х3
# - Путь: только вправо и вниз
#
# Что нужно сделать:
# - Проверить является ли строка полиндромом
# - Логика перемещения вправо и вниз

import itertools


# *********************************************************************************************************************
# Сверху и слева направо
def paths(m, n):
    """
    Определение количества всевозможных путей в матрице n x m, состоящей из цифр
    m: строка
    n: столбец
    """
    row = [1] * n  # заполняем первую строку
    # print(row)
    for i in range(m-1):  # проходимся по строкам
        new_row = [1] * n  # заполняем строки (накопительная строка)
        for j in range(n-2, -1, -1):  # идем сверху вниз
            new_row[j] = new_row[j+1] + row[j]  # переназначаем элементы в строке добавив один элемент к след. слева
        row = new_row  # переназначаем строку в качестве последней строки матрицы
        # print(row)
    return row[0]


# *********************************************************************************************************************
# Проверим сколько всего возможно комбинаций из двух букв a и b
a = [['a', 'a', 'a'],
     ['b', 'b', 'a'],
     ['a', 'b', 'a']]
x = list(itertools.product(*a))  # все количества комбинаций букв в матрице
p_1 = []
for i in x:  # пройдемся по всем комбинациям
    y = "".join(i)  # соединим их
    p_1.append(y)  # и добавим в отдельный список


def is_palindrome_1(p_1):
    """Проверка является ли строка палиндромом"""
    p_2 = []
    for x in set(p_1):  # пройдемся по списку соединенных комбинаций
        if x == x[::-1]:  # если комбинация палиндром
            p_2.append(x)  # добавим ее в отдельный список
    return p_2


# *********************************************************************************************************************
# Сверху и справа налево

def is_palindrome(string):
    """Проверка является ли строка палиндромом"""
    if string == string[::-1]:
        return True
    else:
        return False


def palindromic_path(string, a, i, j, m, n):
    """
    Number of palindromic paths in a matrix (Количество палиндромных путей в матрице)
    string: пустая строка
    a: матрица
    i, j: индексы строк и столбцов верхнего левого угла (это 0, 0)
    m: строки
    n: столбцы
    Сложность O((m x n)^2)
    """
    if j < m - 1 or i < n - 1:
        if i < n - 1:
            palindromic_path(string + a[i][j], a, i + 1, j, m, n)
        if j < m - 1:
            palindromic_path(string + a[i][j], a, i, j + 1, m, n)
    # THE PATHS
    # aaaa (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2)
    # aaba (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2)
    # aabb (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2)
    # abba (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)

    else:  # если мы достигли правого нижнего угла (конца пути), мы переходим к функции is_palindrome, для проверки.
        string = string + a[n - 1][m - 1]
        if is_palindrome(string):
            print('Строка палиндром:', string)


if __name__ == '__main__':
    print('Количество всевозможных путей в матрице 3х3 состоящей из цифр:', paths(3, 3))
    print('***********************************************************************************************************')
    print('Все комбинации букв а и b матрицы 3х3:', x)
    print('***********************************************************************************************************')
    print('Все соединенные комбинации букв а и b матрицы 3х3:', p_1)
    print('***********************************************************************************************************')
    print('Все уникальные соединенные комбинации букв а и b матрицы 3х3:', set(p_1))
    print('***********************************************************************************************************')
    print('Сколько всего существует палиндромов из букв а и b матрицы 3х3:', is_palindrome_1(p_1))
    print('***********************************************************************************************************')
    string = ''
    print(palindromic_path(string, a, 0, 0, 3, 3))



# Adapter (Адаптер) — позволяет объектам с несовместимыми интерфейсами работать вместе.
# Трансформирует интерфейс или данные одного объекта в такой вид, чтобы он стал понятен другому объекту.
########################################################################################################################
# Адаптер оборачивает один из объектов, так что другой объект даже не знает о наличии первого.
# Например, вы можете обернуть объект, работающий в метрах, адаптером, который бы конвертировал данные в футы.
########################################################################################################################
# Применяется:
# - Когда вы хотите использовать сторонний класс, но его интерфейс не соответствует остальному коду приложения.
# - Когда вам нужно использовать несколько существующих подклассов, но в них не хватает какой-то общей функциональности,
# причём расширить суперкласс вы не можете.
########################################################################################################################
# Плюсы:
# - Отделяет и скрывает от клиента подробности преобразования различных интерфейсов.
########################################################################################################################
# Минусы:
# - Усложняет код программы из-за введения дополнительных классов.
########################################################################################################################
# Существует два способа реализации шаблона адаптера:
# 1. **Объектный адаптер** - использует инкапсуляцию (сокрытие).
# 2. **Адаптер класса** - использует множественное наследование.
########################################################################################################################
# Есть две веские причины предпочесть объектный адаптер адаптеру класса:
# 1. Слабая связь.
# 2. Множественное наследование - сложная задача.
########################################################################################################################

class Smartphone:
    """Телефон с входным напряжением 5В"""
    max_input_voltage = 5

    @classmethod
    def outcome(cls, input_voltage):
        """Проверяем входящее напряжение. Если оно не больше 5В - телефон будет заряжаться, иначе телефон сгорит"""
        if input_voltage > cls.max_input_voltage:
            print(f"Input voltage: {input_voltage}V -- BURNING!!!")
        else:
            print(f"Input voltage: {input_voltage}V -- Charging...")

    def charge(self, input_voltage):
        """Зарядить телефон входным напряжением"""
        self.outcome(input_voltage)


class Socket:
    """Общий класс розеток"""
    output_voltage = None


class EUSocket(Socket):
    """Европейская розетка"""
    output_voltage = 230


class USSocket(Socket):
    """Американская розетка"""
    output_voltage = 120


class EUAdapter:
    """Адаптер EUAdapter инкапсулирует клиента (Smartphone) и поставщика (EUSocket)"""
    input_voltage = EUSocket.output_voltage
    output_voltage = Smartphone.max_input_voltage


class USAdapter:
    """Адаптер USAdapter инкапсулирует клиента (Smartphone) и поставщика (USSocket)"""
    input_voltage = USSocket.output_voltage
    output_voltage = Smartphone.max_input_voltage


if __name__ == '__main__':
    smartphone = Smartphone()
    smartphone.charge(EUSocket.output_voltage)  # -> BURNING!!!
    smartphone.charge(USSocket.output_voltage)  # -> BURNING!!!
    smartphone.charge(EUAdapter.output_voltage)  # -> Charging...
    smartphone.charge(USAdapter.output_voltage)  # -> Charging...
